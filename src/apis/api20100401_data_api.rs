/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

/// struct for passing parameters to the method [`fetch_recording_add_on_result_payload_data`]
#[derive(Clone, Debug)]
pub struct FetchRecordingAddOnResultPayloadDataParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
    pub account_sid: String,
    /// The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
    pub reference_sid: String,
    /// The SID of the AddOnResult to which the payload to fetch belongs.
    pub add_on_result_sid: String,
    /// The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
    pub payload_sid: String
}


/// struct for typed errors of method [`fetch_recording_add_on_result_payload_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchRecordingAddOnResultPayloadDataError {
    UnknownValue(serde_json::Value),
}


/// Fetch an instance of a result payload
pub async fn fetch_recording_add_on_result_payload_data(configuration: &configuration::Configuration, params: FetchRecordingAddOnResultPayloadDataParams) -> Result<(), Error<FetchRecordingAddOnResultPayloadDataError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let account_sid = params.account_sid;
    let reference_sid = params.reference_sid;
    let add_on_result_sid = params.add_on_result_sid;
    let payload_sid = params.payload_sid;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{PayloadSid}/Data.json", local_var_configuration.base_path, AccountSid=crate::apis::urlencode(account_sid), ReferenceSid=crate::apis::urlencode(reference_sid), AddOnResultSid=crate::apis::urlencode(add_on_result_sid), PayloadSid=crate::apis::urlencode(payload_sid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<FetchRecordingAddOnResultPayloadDataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

